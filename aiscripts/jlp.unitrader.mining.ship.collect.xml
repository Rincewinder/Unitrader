<?xml version="1.0" encoding="iso-8859-1"?>
<aiscript name="jlp.unitrader.mining.ship.collect" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:noNamespaceSchemaLocation="aiscripts.xsd" version="5"
>
	<!--
		This script does the actual mining both high and low attention. While there is
		no difference between gas and mineral mining in low attention, both cases are
		separated in high attention (because gases can't be picked up).
		by Michael, Benedikt, Adrian
	-->
	<params>
		<param name="zone" />
		<param name="ware" />
		<param name="secwares" />
		<param name="shoppinglist" />
		<param name="debugchance" />
	</params>
	<init>
		<set_command command="command.mining" param="$zone" />
	</init>
	<patch sinceversion="3">
		<!--Reset gathertime as low attention case may have modified it incorrectly -->
		<set_value name="$gathertime" min="172s" max="188s" />
	</patch>

	<attention min="visible">
		<actions>
			<do_if value="this.$jlpUniMiningRun" exact="true" negate="true">
				<return value="'aborted'" />
			</do_if>
			<set_value name="$dronelaunchdelay" exact="3s"
				comment="the minimum delay between two drone launches" />
			<set_value name="$gathertime" min="172s" max="188s"
				comment="the time spent to gather resources at a certain location (gases only)" />
			<set_value name="$traveltime" min="76s" max="84s"
				comment="the time between gathering at two different locations (gases only)" />

			<run_script name="'move.undock'" sinceversion="4" />

			<get_safe_pos result="$destination" zone="$zone" radius="this.ship.size" min="1km"
				max="35km" />

			<!-- Move to destination zone -->
			<do_if value="this.ship.zone != $zone">
				<debug_text text="'Go mining to zone: ' + $zone.knownname" chance="$debugchance" />
				<!-- If the zone to mine is a highway -->
				<do_if value="$zone.isclass.highway">
					<debug_text text="'Error moving to %1. This zone is a highway'" />
					<!-- <resume label="start" /> -->
				</do_if>
				<run_script name="'move.generic'">
					<param name="destination" value="$zone" />
					<param name="endintargetzone" value="true" />
					<param name="debugchance" value="$debugchance" />
				</run_script>
			</do_if>

			<label name="start" />

			<!-- gas mining -->
			<do_if value="$ware.tags.indexof.{tag.liquid}">
				<!-- chance to skip initial movement -->
				<do_if value="true" chance="$gathertime / ($gathertime + $traveltime) * 100">
					<set_value name="$skipmovement" exact="true" />
				</do_if>
				<do_else>
					<set_value name="$skipmovement" exact="false" />
				</do_else>
				<set_value name="$gathercounter" exact="0s" />

				<!-- loop as long as there is at least 5% free cargo space -->
				<do_while value="this.ship.cargo.{$ware}.free gt (0.05 * this.ship.cargo.{$ware}.max)">

					<!-- Command action -->
					<set_command_action commandaction="commandaction.searchingresources" />
					<!-- Zone no longer exists -->
					<do_if value="not $zone.exists">
						<return value="'aborted'" />
					</do_if>
					<!-- Drone launchpad/drones destroyed -->
					<do_if value="not this.ship.units.collect.{$ware}.count">
						<return value="'nodrones'" />
					</do_if>

					<do_if value="$skipmovement" exact="false">
						<do_if value="this.ship.distanceto.{$destination} lt 4km">
							<debug_text text="player.age+' destination almost reached, creating a new destination'"
								chance="$debugchance" />
							<get_safe_pos result="$destination" zone="$zone" radius="this.ship.size" min="1km"
								max="35km" />
						</do_if>
						<debug_text
							text="player.age+' movement started (destination: '+this.ship.distanceto.{$destination}+'m)'"
							chance="$debugchance" />
						<move_to object="this.ship" destination="this.ship.zone" finishonapproach="true"
							forceposition="false"
						>
							<position value="$destination" />
							<interrupt_after_time time="1s" />
						</move_to>
						<wait exact="$traveltime" />
						<debug_text text="player.age+' movement stopped, preparing to mine'" chance="$debugchance" />
						<stop_moving object="this.ship" immediate="false" />
						<wait min="4s" max="6s" />
					</do_if>
					<do_else>
						<set_value name="$skipmovement" exact="false" />
					</do_else>
					<!-- launch drones to collect gas -->
					<debug_text text="player.age+' starting to launch drones'" chance="$debugchance" />
					<set_value name="$gatherstart" exact="player.age" />
					<do_while value="player.age lt ($gatherstart + $gathertime)">
						<do_if value="this.ship.cargo.{$ware}.free le (0.05 * this.ship.cargo.{$ware}.max)">
							<break />
						</do_if>
						<launch_drone name="$drone" object="this.ship" group="unitcategory.gascollector"
							exact="1" />
						<do_if value="$drone.isoperational">
							<start_script name="'mining.ship.drone'" object="$drone.pilot">
								<param name="homebase" value="this.ship" />
								<param name="ware" value="$ware" />
							</start_script>
						</do_if>
						<wait exact="$dronelaunchdelay" />
						<set_value name="$gathercounter" exact="$gathercounter + $dronelaunchdelay" />
						<!-- gas gathering uses low attention mechanic -->
						<do_if value="$gathercounter ge 15s">
							<set_value name="$gathercounter" exact="15s" />
							<do_if value="($gatherstart + $traveltime) lt player.age">
								<get_resource_gatherrate name="$gatherrate" refobject="this.ship"
									zone="$zone" ware="$ware" />
								<set_value name="$gathered" min="$gatherrate * $gathercounter * 0.75" max="$gatherrate * $gathercounter * 1.25" />
								<deplete_yield zone="$zone" container="this.ship" ware="$ware" amount="$gathered" />
								<debug_text
									text="player.age + ' collected %1 units of %2 (%3 units/s on average)'.[$gathered, $ware, $gatherrate]"
									chance="$debugchance" />
								<set_value name="$gathercounter" exact="0" />
							</do_if>
						</do_if>
					</do_while>
					<debug_text text="player.age+' stop launching drones'" chance="$debugchance" />
				</do_while>
				<debug_text text="player.age+' less than 5% free cargo space'" chance="$debugchance" />
			</do_if>
			<do_else>
				<!-- mineral mining (capital ships) -->
				<do_if value="this.ship.isclass.ship_xl or this.ship.isclass.ship_l">
					<set_value name="$moving" exact="false" />
					<set_value name="$target" exact="null" />

					<do_while value="this.ship.cargo.{$ware}.free gt (0.05 * this.ship.cargo.{$ware}.max)">
						<!-- Command action -->
						<set_command_action commandaction="commandaction.searchingresources" />
						<!-- Zone no longer exists -->
						<do_if value="not $zone.exists">
							<return value="'aborted'" />
						</do_if>
						<!-- Drone launchpad/drones destroyed -->
						<do_if value="not this.ship.units.collect.{$ware}.count">
							<return value="'nodrones'" />
						</do_if>

						<set_value name="$checkware" exact="$ware" />
						<!-- 20% chance to gather secondary wares that can be mined -->
						<do_if value="@$secwares.count" chance="10">
							<!-- <set_value name="$checkware" exact="$secwares.random"/> -->
							<set_value name="$tryware" exact="$secwares.random" />
							<!-- evaluate if should use a secondary ware -->
							<do_if value="(this.ship.units.collect.{$tryware}.count and this.ship.cargo.{$tryware}.free)">
								<debug_text text="'IZ mining: try other ware (%1)'.[$tryware]" chance="$debugchance" />
								<set_value name="$checkware" exact="$tryware" />
							</do_if>
							<remove_value name="$tryware" />
						</do_if>

						<!-- find pickup (filtered by ownership) and target -->
						<set_value name="$pickuptarget" exact="false" />
						<set_value name="$skill" exact="(this.combinedskill - 50) * 3" />
						<find_asteroid_in_cluster name="$pickup" cluster="this.cluster"
							refobject="this.ship" canpickup="true" multiple="true" maxdistance="4km" viewangle="360deg"
							ware="$checkware" />
						<do_all exact="$pickup.count" counter="$i" reverse="true">
							<do_if value="$pickup.{$i}.owner">
								<remove_value name="$pickup.{$i}" />
							</do_if>
							<do_elseif value="not $pickup.{$i}.canbepickedup">
								<debug_text
									text="'%1 in %2 (: %3) cannot be picked up!'.[$pickup.{$i}, $pickup.{$i}.zone.knownname, $.knownname]"
									chance="$debugchance" />
								<remove_value name="$pickup.{$i}" />
							</do_elseif>
							<do_elseif value="$pickup.{$i}.wares.{$checkware}.count le 0" chance="$skill">
								<remove_value name="$pickup.{$i}" />
							</do_elseif>
						</do_all>

						<!-- Find asteroids if there is no target -->
						<do_if value="not $target.exists">
							<!-- find asteroids and calculate their total hull -->
							<set_value name="$asteroidhull" exact="0" />
							<find_asteroid_in_cluster name="$asteroids" cluster="this.cluster"
								refobject="this.ship" canpickup="false" multiple="true" maxdistance="3km + this.ship.size"
								viewangle="360deg" ware="$checkware" />
							<!-- Check asteroids and take the biggest -->
							<do_if value="$asteroids.count" min="1">
								<set_value name="$target" exact="$asteroids.{1}" />
								<set_value name="$bestasteroid" exact="$asteroids.{1}.hull" />
								<do_all exact="$asteroids.count" counter="$i">
									<set_value name="$asteroidhull" exact="$asteroids.{$i}.hull" operation="add" />
									<do_if value="$asteroids.{$i}.hull gt $bestasteroid">
										<set_value name="$target" exact="$asteroids.{$i}" />
										<set_value name="$bestasteroid" exact="$asteroids.{$i}.hull" />
									</do_if>
								</do_all>
								<!-- Attack asteroids with mining lasers -->
								<set_turret_targets object="this.ship" target="$asteroids" weapontype="mining"
									clearpreferred="false" preferredtarget="$target" />
							</do_if>
							<do_else>
								<!-- Find again with bigger range (only one now) -->
								<find_asteroid_in_cluster name="$target" cluster="this.cluster"
									refobject="this.ship" canpickup="false" multiple="false" maxdistance="55km" viewangle="360deg"
									ware="$checkware" />
							</do_else>
							<!-- If any target found, set it as a new position -->
							<do_if value="$target.exists">
								<set_region_object_persistence object="$target" />
								<set_value name="$destination" exact="$target.position" />
								<set_value name="$moving" exact="false" comment="to restart the movement" />
								<set_turret_targets object="this.ship" target="$asteroids" weapontype="mining"
									clearpreferred="false" preferredtarget="$target" />
							</do_if>
						</do_if>

						<!-- Move/Stop -->
						<do_if value="$pickup.count ge this.ship.availableunits.collect.{$checkware}.count">
							<!-- enough targets in range, stop moving -->
							<set_value name="$moving" exact="false" />
							<debug_text
								text="'%1 movement stopped [pickup count: %2, asteroid count: %3 (%4)]'.[player.age, $pickup.count, $asteroids.count, ($asteroidhull)L]"
								chance="$debugchance" />
							<stop_moving object="this.ship" immediate="false" />
							<!-- Command action -->
							<set_command_action commandaction="commandaction.waitingdrones" />
						</do_if>
						<do_elseif value="$moving">
							<do_if value="this.ship.distanceto.{$destination} lt this.ship.size * 2">
								<set_value name="$moving" exact="false" />
								<debug_text
									text="'%1 movement stopped because we are almost there [pickup count: %2, asteroid count: %3 (%4)]'.[player.age, $pickup.count, $asteroids.count, ($asteroidhull)L]"
									chance="$debugchance" />
								<set_value name="$randmaxpos" max="this.ship.size * 2" />
								<stop_moving object="this.ship" immediate="false" />
							</do_if>
						</do_elseif>
						<do_else>
							<!-- not enough targets in range, start moving -->
							<wait exact="3s" sinceversion="2" chance="0"
								comment="TODO after the wait the target can be destroyed" />
							<!-- Move -->
							<do_if value="$target.exists">
								<!-- Check if the target can be hit (check mining turrets) -->
								<do_if value="not @$turrets.{1}.exists" comment="check with exists, because the disappear in low attention">
									<find_object_component object="this.ship" name="$turrets" multiple="true"
										class="class.turret" weapontype="mining" />
								</do_if>

								<!-- If there is view for any turret, break the iteration -->
								<set_value name="$view" exact="false" />
								<do_all exact="$turrets.count" counter="$i" reverse="true"
									comment="in reverse because usually the front turret is the last, so the iteration breaks earlier"
								>
									<check_line_of_sight object="$turrets.{$i}" target="$target" name="$result" />
									<do_if value="$result and $turrets.{$i}.distanceto.{$target} lt 2900">
										<set_value name="$view" exact="true" />
										<debug_text text="'target view in %1. Distance %2'.[$i, $turrets.{$i}.distanceto.{$target}]"
											chance="$debugchance" />
										<break />
									</do_if>
								</do_all>
								<!-- If there is no view with any turret, move to the target -->
								<do_if value="not $view">
									<set_value name="$moving" exact="true" />
									<!-- first try to rotate on the spot -->
									<debug_text text="'rotating towards asteroid: ' + $target" chance="$debugchance" />
									<create_orientation name="$rot" orientation="look_at" refobject="$target">
										<position object="this.ship" />
									</create_orientation>
									<move_to object="this.ship" destination="$target.zone" finishonapproach="true"
										forceposition="false" forcerotation="true" abortpath="true" usehighways="false"
										sinceversion="5"
									>
										<position object="this.ship" max="@$randmaxpos" />
										<rotation value="$rot" />
										<interrupt_after_time time="500ms" />
									</move_to>
									<remove_value name="$randmaxpos" />
									<do_if value="$target.exists">
										<debug_text text="'flying to asteroid: ' + $target" chance="$debugchance" />
										<move_to object="this.ship" destination="$target.zone" finishonapproach="true"
											forceposition="false" abortpath="false" sinceversion="2" usehighways="false"
										>
											<position object="$target" />
											<interrupt_after_time time="10s" />
										</move_to>
									</do_if>
								</do_if>
							</do_if>
							<do_else>
								<!-- No asteroids, target or pickable so move to a random place -->
								<get_safe_pos result="$destination" zone="$zone" radius="this.ship.size" min="1km"
									max="50km" />
								<debug_text
									text="'%1 movement started Random destity [pickup count: %2, asteroid count: %3 (%4)]'.[player.age, $pickup.count, $asteroids.count, ($asteroidhull)L]"
									chance="$debugchance" />
								<set_value name="$moving" exact="true" />
								<move_to object="this.ship" destination="this.ship.zone" finishonapproach="true"
									forceposition="false" abortpath="true" usehighways="false"
								>
									<position value="$destination" />
									<interrupt_after_time time="20s" />
								</move_to>
							</do_else>
						</do_else>

						<!-- launch drone to pick up the target -->
						<do_if value="$pickup.count">
							<set_value name="$pickuptarget" exact="$pickup.random" />
							<set_region_object_persistence object="$pickuptarget"
								persistent="true" />
							<launch_drone name="$drone" object="this.ship" group="unitcategory.orecollector"
								exact="1" />
							<do_if value="$drone.isoperational">
								<debug_text
									text="'%1 drone launched [pickup count: %2, asteroid count: %3 (%4)]'.[player.age, $pickup.count, $asteroids.count, ($asteroidhull)L]"
									chance="$debugchance" />
								<start_script name="'mining.ship.drone'" object="$drone.pilot">
									<param name="homebase" value="this.ship" />
									<param name="target" value="$pickuptarget" />
								</start_script>
								<set_owner object="$pickuptarget" faction="this.ship.owner" />
							</do_if>
							<do_else>
								<debug_text
									text="'%1 no drone available [pickup count: %2, asteroid count: %3 (%4)]'.[player.age, $pickup.count, $asteroids.count, ($asteroidhull)L]"
									chance="$debugchance" />
							</do_else>
						</do_if>

						<wait exact="$dronelaunchdelay" />
					</do_while>
					<debug_text text="player.age+' less than 5% free cargo space'" chance="$debugchance" />
				</do_if>
				<do_else>
					<!-- mineral mining (medium ships) -->
					<set_value name="$attackposition" exact="false" />
					<do_while value="this.ship.cargo.{$ware}.free gt (0.05 * this.ship.cargo.{$ware}.max)">

						<!-- Command action -->
						<set_command_action commandaction="commandaction.searchingresources" />

						<!-- Zone no longer exists -->
						<do_if value="not $zone.exists">
							<return value="'aborted'" />
						</do_if>
						<!-- Drone launchpad/drones destroyed -->
						<do_if value="not this.ship.units.collect.{$ware}.count">
							<return value="'nodrones'" />
						</do_if>

						<set_value name="$checkware" exact="$ware" />
						<!-- 10% chance to gather secondary wares that can be mined -->
						<do_if value="@$secwares.count" chance="10">
							<set_value name="$tryware" exact="$secwares.random" />
							<!-- evaluate if should use a secondary ware -->
							<do_if value="(this.ship.units.collect.{$tryware}.count and this.ship.cargo.{$tryware}.free)">
								<debug_text text="'IS mining: try other ware (%1)'.[$tryware]" chance="$debugchance" />
								<set_value name="$checkware" exact="$tryware" />
							</do_if>
							<remove_value name="$tryware" />
						</do_if>
						<!-- find pickup (filtered by ownership) and target -->
						<set_value name="$pickuptarget" exact="false" />
						<set_value name="$skill" exact="(this.combinedskill - 50) * 3" />

						<!-- Small asteroids to pick up -->
						<find_asteroid_in_cluster name="$pickup" cluster="this.cluster"
							refobject="this.ship" canpickup="true" multiple="true" maxdistance="2km" ware="$checkware"
							viewangle="360deg" />
						<do_all exact="$pickup.count" counter="$i" reverse="true">
							<do_if value="$pickup.{$i}.owner">
								<remove_value name="$pickup.{$i}" />
							</do_if>
							<do_elseif value="not $pickup.{$i}.canbepickedup">
								<debug_text text="'%1 in %2 cannot be picked up!'.[$pickup.{$i}, $pickup.{$i}.zone.knownname]"
									chance="$debugchance" />
								<remove_value name="$pickup.{$i}" />
							</do_elseif>
							<do_elseif value="$pickup.{$i}.wares.{$checkware}.count le 0" chance="$skill">
								<remove_value name="$pickup.{$i}" />
							</do_elseif>
						</do_all>
						<!-- evaluate movement -->
						<do_if value="$pickup.count le this.ship.units.collect.{$checkware}.count">
							<!-- No target -->
							<do_if value="not @$target.exists">
								<!-- find asteroids and the best target -->
								<find_asteroid_in_cluster name="$asteroids" cluster="this.cluster"
									refobject="this.ship" canpickup="false" multiple="true" maxdistance="3km" ware="$checkware"
									viewangle="180deg" />

								<do_if value="$asteroids.count" min="1">
									<set_value name="$target" exact="$asteroids.{1}" />
									<set_value name="$bestasteroid" exact="$asteroids.{1}.hull" />
									<do_all exact="$asteroids.count" counter="$i">
										<do_if value="$asteroids.{$i}.hull lt $bestasteroid">
											<set_value name="$target" exact="$asteroids.{$i}" />
											<set_value name="$bestasteroid" exact="$asteroids.{$i}.hull" />
										</do_if>
									</do_all>
									<debug_text
										text="'%1 new target [pickup count: %2, asteroid count: %3 (%4)]'.[player.age, $pickup.count, $asteroids.count, $bestasteroid]"
										chance="$debugchance" />
								</do_if>
								<do_else>
									<!-- Find again with bigger range -->
									<find_asteroid_in_cluster name="$target" cluster="this.cluster"
										refobject="this.ship" canpickup="false" multiple="false" maxdistance="55km" ware="$checkware"
										viewangle="360deg" />
								</do_else>
							</do_if>

							<!-- Target exists -->
							<do_if value="$target.exists">
								<!-- Set asteroid persistence -->
								<set_region_object_persistence object="$target" />
								<!-- Distance check -->
								<do_if value="this.ship.distanceto.{$target} - ($target.size/2.f)" min="1200m">
									<!-- the target is out of firing range, we have to move closer -->
									<debug_text
										text="player.age+' target is out of range ('+ (this.ship.distanceto.{$target} - ($target.size/2.f)) +'m)'"
										chance="$debugchance" />
									<move_to object="this.ship" destination="$target.zone" forceposition="false"
										finishonapproach="true"
									>
										<position object="$target" />
										<interrupt_after_time time="1s" />
									</move_to>
								</do_if>
								<do_else>
									<set_value name="$attackposition" exact="true" />
									<shoot_at object="this.ship" slot="tag.primary_slot" target="$target" tolerance="12.0deg"
										weapontype="mining" />
									<!-- stop and rotate -->
									<debug_text
										text="player.age+' target is now in range ('+ (this.ship.distanceto.{$target} - ($target.size/2.f)) +'m)'"
										chance="$debugchance" />
									<move_to object="this.ship" destination="$target.zone" forcerotation="true"
										forcesteering="true" flightbehaviour="flightbehaviour.mining"
									>
										<position object="$target" max="50m" />
										<interrupt_after_time time="1s" />
									</move_to>
								</do_else>
							</do_if>

							<!-- No Target - Attack position -->
							<do_elseif value="not @$target.exists and $attackposition">
								<!-- We where shooting the asteroid -->
								<set_value name="$attackposition" exact="false" />
							</do_elseif>

							<!-- No Target - No Attack position -->
							<do_elseif value="not @$target.exists and not $attackposition">
								<!-- Reset state -->
								<remove_value name="$target" />
								<stop_shooting object="this.ship" slot="tag.primary_slot" />
								<set_flight_control_model object="this.ship" flightcontrolmodel="flightcontrolmodel.spline" />
								<!-- No more asteroids -->
								<do_if value="not @$asteroids.count">
									<!-- when no asteroid found and nothing to pickup -->
									<do_if value="not $pickup.count">
										<debug_text text="'no resources found, flying to random position'" chance="$debugchance" />

										<get_safe_pos result="$destination" zone="$zone" radius="this.ship.size" min="1km"
											max="50km" />
										<!-- Fly to a random pos in zone -->
										<move_to object="this.ship" destination="$zone" sinceversion="1">
											<position value="$destination" />
											<interrupt_after_time time="2min" />
										</move_to>
									</do_if>
								</do_if>
							</do_elseif>
						</do_if>

						<!-- launch drone to pick up the target -->
						<do_if value="$pickup.count">
							<set_value name="$pickuptarget" exact="$pickup.random" />
							<do_if value="$pickuptarget.exists">
								<set_region_object_persistence object="$pickuptarget"
									persistent="true" />
								<launch_drone name="$drone" object="this.ship" group="unitcategory.orecollector"
									exact="1" />
								<do_if value="$drone.isoperational">
									<debug_text
										text="'%1 drone launched [pickup count: %2, asteroid count: %3]'.[player.age, $pickup.count, @$asteroids.count]"
										chance="$debugchance" />
									<start_script name="'mining.ship.drone'" object="$drone.pilot">
										<param name="homebase" value="this.ship" />
										<param name="target" value="$pickuptarget" />
									</start_script>
									<set_owner object="$pickuptarget" faction="this.ship.owner" />
								</do_if>
								<do_else>
									<set_command_action commandaction="commandaction.waitingdrones" />
									<debug_text
										text="'%1 no drone available [pickup count: %2, asteroid count: %3]'.[player.age, $pickup.count, @$asteroids.count]"
										chance="$debugchance" />
								</do_else>
							</do_if>
						</do_if>

						<wait exact="$dronelaunchdelay" />

					</do_while>
				</do_else>
			</do_else>

			<!-- Stop mining lasers -->
			<stop_shooting object="this.ship" slot="tag.primary_slot" comment="for primary weapon" />
			<cease_fire object="this.ship" weapontype="mining" comment="for turrets" />

			<return value="'cargofull'" />

		</actions>
	</attention>
	<attention min="unknown">
		<actions>

			<set_value name="$dronelaunchdelay" exact="3s"
				comment="the minimum delay between two drone launches" />
			<set_value name="$gathertime" min="172s" max="188s"
				comment="the time spent to gather resources at a certain location (gases only)" />
			<set_value name="$traveltime" min="76s" max="84s"
				comment="the time between gathering at two different locations (gases only)" />

			<run_script name="'move.undock'" sinceversion="4" />

			<get_safe_pos result="$destination" zone="$zone" radius="this.ship.size" min="1km"
				max="35km" />

			<!-- Move to destination zone -->
			<do_if value="this.ship.zone != $zone">
				<debug_text text="'Go mining to zone: ' + $zone.knownname" chance="$debugchance" />
				<!-- If the zone to mine is a highway -->
				<do_if value="$zone.isclass.highway">
					<debug_text text="'Error moving to %1. This zone is a highway'" />
					<!-- <resume label="start" /> -->
				</do_if>
				<run_script name="'move.generic'">
					<param name="destination" value="$zone" />
					<param name="endintargetzone" value="true" />
					<param name="debugchance" value="$debugchance" />
				</run_script>
			</do_if>

			<label name="start" />

			<wait min="8s" max="12s" />
			<do_while value="this.ship.cargo.{$ware}.free gt 0">

				<!-- command action simulation -->
				<do_any>
					<set_command_action commandaction="commandaction.searchingresources" weight="60" />
					<set_command_action commandaction="commandaction.flying" weight="40" />
				</do_any>

				<!-- Zone no longer exists -->
				<do_if value="not $zone.exists">
					<return value="'aborted'" />
				</do_if>
				<!-- Drone launchpad/drones destroyed -->
				<do_if value="not this.ship.units.collect.{$ware}.count">
					<return value="'nodrones'" />
				</do_if>

				<set_value name="$currentware" exact="$ware" />
				<!-- 20% chance that we try to collect one of the other resources that can be gathered in this zone 
					if they are useful to our homebase, $tryware can be the same as $ware -->
				<do_if value="@$secwares.count" chance="10">
					<set_value name="$tryware" exact="$secwares.random" />
					<!-- evaluate if should use a secondary ware -->
					<do_if value="(this.ship.units.collect.{$tryware}.count and this.ship.cargo.{$tryware}.free)">
						<debug_text text="'OOZ mining: try other ware (%1)'.[$tryware]" chance="$debugchance" />
						<set_value name="$currentware" exact="$tryware" />
					</do_if>
					<remove_value name="$tryware" />
				</do_if>
				<get_resource_gatherrate name="$gatherrate" refobject="this.ship" zone="$zone"
					ware="$currentware" />
				<do_if value="$gatherrate" max="0">
					<debug_text
						text="player.age + ' WARNING: gatherrate for %1 in zone %2 is %4'.[$currentware, $zone.knownname, $gatherrate]"
						chance="$debugchance" />
				</do_if>
				<set_value name="$gatherstart" exact="player.age" />
				<!-- smaller mining ships need some time to gather more than zero resources -->
				<do_if value="this.ship.isclass.ship_xl or this.ship.isclass.ship_l">
					<wait min="16s" max="24s" />
				</do_if>
				<do_else>
					<wait min="112s" max="128s" />
				</do_else>
				<set_value name="$currentgathertime" exact="player.age - $gatherstart" />
				<set_value name="$gathered" exact="$currentgathertime * $gatherrate" />
				<do_if value="this.ship.cargo.{$currentware}.free lt $gathered">
					<set_value name="$gathered" exact="this.ship.cargo.{$currentware}.free" />
				</do_if>
				<deplete_yield zone="$zone" container="this.ship" ware="$currentware" amount="$gathered" />
				<debug_text
					text="player.age + ' collected %1 units of %2 in zone %3 in %4 seconds (%5 units/s)'.[$gathered, $currentware, $zone.knownname, $currentgathertime, $gatherrate]"
					chance="$debugchance" />

			</do_while>

			<debug_text
				text="player.age + ' %1(job: \'%2\') completed gather-run of %3 in %4. Cargo: %5'.[this.ship.knownname, this.ship.job, $ware, $zone.knownname, this.ship.cargo.list]"
				chance="$debugchance" />

			<return value="'cargofull'" />

		</actions>
	</attention>
</aiscript>