<?xml version="1.0" encoding="iso-8859-1" ?>
<aiscript name="jlp.unitrader.trade.findfreetraderun" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:noNamespaceSchemaLocation="aiscripts.xsd" version="1"
>
	<params>
		<param name="warelist" />
		<param name="range" comment="space to base the search on. $rangeparams use this as the range from home" />
		<param name="rangeMode" comment="'zone', 'sector', 'cluster', 'ranged'" />
		<param name="sellrange" default="null"
			comment="list: [$mingates, $maxgates] amount of jumpgates from $range the ship can sell wares (null == only sell in $range)" />
		<param name="buyrange" default="null"
			comment="list: [$mingates, $maxgates] amount of jumpgates from $range the ship can buy wares (null == only buy in $range)" />
		<param name="debugchance" default="0" />
		<param name="debugchance2" default="0" />
	</params>
	<init>
		<set_command command="command.searchtrades" />
	</init>

	<attention min="unknown">
		<actions>
			<!-- set up initial state for trade runs -->
			<set_value name="$reservetrades" exact="false" />
			<set_value name="$minvolume" exact="this.ship.cargo.capacity/2" />
			<set_value name="$capship" exact="this.ship.isclass.ship_l or this.ship.isclass.ship_xl" />
			<do_if value="$capship">
				<set_value name="$reservetrades" exact="true" />
				<!-- higher skill -> more minvolume to can sell or buy more -->
				<set_value name="$minvolume" exact="this.ship.cargo.capacity/20 " />
			</do_if>
			<debug_text text="'min trade volume for ' + this.ship.knownname + ': ' + $minvolume"
				chance="$debugchance" />

			<set_value name="$cargoSell" exact="true" />

			<label name="start" />

			<do_if value="this.$jlpUniTraderRun" exact="true" negate="true">
				<return>
					<retval name="buyoffer" value="null" />
					<retval name="selloffer" value="null" />
				</return>
			</do_if>

			<set_value name="$currentcargo" exact="this.ship.cargo.list" />

			<set_value name="$buyoffer" exact="null" />
			<set_value name="$selloffer" exact="null" />
			<set_value name="$buildership_check" exact="true" />
			<debug_text text="player.age + ' current cargo: ' + $currentcargo" chance="$debugchance" />

			<!-- Skills -->
			<set_value name="$onlyKnownBuy" exact="false" />
			<set_value name="$onlyKnownSell" exact="false" />
			<set_value name="$onlyTraderBuy" exact="false" />
			<set_value name="$onlyTraderSell" exact="false" />
			<set_value name="$tradeRestrictionBuy" exact="this.$jlp_unitrader_trade_stations_buy" />
			<set_value name="$tradeRestrictionSell" exact="this.$jlp_unitrader_trade_stations_sell" />

			<do_if value="$tradeRestrictionBuy == 'onlyKnownBuy'">
				<set_value name="$onlyKnownBuy" exact="true" />
			</do_if>
			<do_if value="$tradeRestrictionSell == 'onlyKnownSell'">
				<set_value name="$onlyKnownSell" exact="true" />
			</do_if>
			<do_if value="$tradeRestrictionBuy == 'onlyTraderBuy'">
				<set_value name="$onlyTraderBuy" exact="true" />
			</do_if>
			<do_if value="$tradeRestrictionSell == 'onlyTraderSell'">
				<set_value name="$onlyTraderSell" exact="true" />
			</do_if>

			<set_value name="$checkrange" exact="this.ship.zone" />

			<!--If there is a $sellrange, find all clusters within the sell range -->
			<do_if value="@$sellrange">
				<debug_text text="'sellrange is min: ' + $sellrange.{1} + ' max: ' + $sellrange.{2}"
					chance="$debugchance2" />
				<write_to_logbook
					text="this.ship.name + 'sellrange is min: ' + $sellrange.{1} + ' max: ' + $sellrange.{2}"
					chance="$debugchance2" category="squad" />

				<create_list name="$sellclusters" />
				<create_list name="$sellclustersdistances" />

				<set_value name="$findclusters" exact="false" />
				<do_if value="@this.$traderange_nexttime le player.age">
					<set_value name="$findclusters" exact="true" />
				</do_if>

				<!--Get all clusters in range. Store on the blackboard so we don't have
					to recalculate every time. -->
				<!--However, recalculate every now and again incase a new gate has opened -->
				<do_if value="not this.$traderange_sellclusters? or $findclusters">
					<debug_text text="'using find_cluster to populate the blackboards list of clusters to sell to'"
						chance="$debugchance2" />
					<write_to_logbook
						text="this.ship.name + 'using find_cluster to populate the blackboards list of clusters to sell to'"
						chance="$debugchance2" category="squad" />

					<find_cluster name="this.$traderange_sellclusters" multiple="true" presentation="false">
						<match_gate_distance object="$range">
							<min exact="$sellrange.{1}" />
							<max exact="$sellrange.{2}" />
						</match_gate_distance>
					</find_cluster>
				</do_if>
				<set_value name="$sellclusters" exact="this.$traderange_sellclusters.clone"
					comment="Copy the list from the blackboard. We will work with this." />
				<write_to_logbook
					text="'sellcluster known:' + $onlyKnownBuy + ' ' + $onlyKnownSell + ' found: ' + $sellclusters.count "
					chance="$debugchance2" category="squad" />


				<!-- Go over them again to sort them. But check the distance from the
					ships current cluster so that nearer clusters are prefered -->
				<do_all exact="$sellclusters.count" counter="$Counter">
					<append_to_list name="$sellclustersdistances" exact="$sellclusters.{$Counter}.gatedistance.{$range}" />
					<debug_text
						text="'sellcluster found: ' + $sellclusters.{$Counter}.name + ' at distance of ' + $sellclustersdistances.{$Counter}"
						chance="$debugchance2" />
					<write_to_logbook
						text="'sellcluster found: ' + $sellclusters.{$Counter}.name + ' at distance of ' + $sellclustersdistances.{$Counter}"
						chance="$debugchance2" category="squad" />
				</do_all>

				<!--Check if the current $checkrange is within
					the sell range. If so, look for offers, otherwise -->
				<set_value name="$GateDistance" exact="$checkrange.gatedistance.{$range}" />
				<debug_text
					text="player.age + 'Checking if checkrange ' + $checkrange.knownname + ' is within sell range. GateDistance from home is: ' + $GateDistance"
					chance="$debugchance2" />
				<write_to_logbook
					text="this.ship.name + 'Checking if checkrange ' + $checkrange.knownname + ' is within sell range. GateDistance from home is: ' + $GateDistance"
					chance="$debugchance2" category="squad" />
				<set_value name="$ValidDistance" exact="true" />
				<do_if value="$sellrange.{1} ge 0">
					<do_if value="$GateDistance lt $sellrange.{1}">
						<set_value name="$ValidDistance" exact="false" />
					</do_if>
				</do_if>
				<do_if value="$sellrange.{2} ge 0">
					<do_if value="$GateDistance gt $sellrange.{2}">
						<set_value name="$ValidDistance" exact="false" />
					</do_if>
				</do_if>
				<do_if value="not $ValidDistance">
					<debug_text
						text="player.age + ' The zone ' + $checkrange.knownname + ' is not within the ships range to sell things. Finding new sell area.'"
						chance="$debugchance" />
					<write_to_logbook
						text="this.ship.name + ' The cluster ' + $checkrange.knownname + ' is not within the ships range to sell things. Finding new sell area.'"
						category="squad" chance="$debugchance2" />
					<set_value name="$checkrange" exact="null" />
				</do_if>
			</do_if>


			<label name="check sell range" />


			<do_if value="@$sellrange">
				<do_if value="not $checkrange">
					<do_if value="$sellclusters.count">
						<set_value name="$Index" exact="$sellclustersdistances.indexof.{$sellclustersdistances.min}" />
						<set_value name="$checkrange" exact="$sellclusters.{$Index}" />
						<debug_text text="player.age + 'range to sell wares is now ' + $checkrange.knownname"
							chance="$debugchance" />
						<write_to_logbook text="this.ship.name + 'range to sell wares is now ' + $checkrange.knownname"
							category="squad" chance="$debugchance2" />
						<remove_value name="$sellclusters.{$Index}" />
						<remove_value name="$sellclustersdistances.{$Index}" />
					</do_if>
				</do_if>
			</do_if>


			<label name="find trade run" />

			<!-- ########### Sell Ship Cargo ############# -->
			<do_if value="$checkrange">
				<!-- try to find a buy offer for wares in our cargo first -->
				<do_if value="$currentcargo.count gt 0  and $cargoSell">
					<!-- Try to sell each cargoware one by one. With this i can prevent
						betters no cargo space situation with differents ships (like scaldis) -->
					<do_all exact="$currentcargo.count" counter="$Counter">
						<set_value name="$currentWare" exact="$currentcargo.{$Counter}" />
						<do_if value="$currentcargo.{$Counter}" exact="ware.fuelcells">
							<continue />
						</do_if>
						<!-- ################### step 1, check if we can sell to build platforms ################### -->
						<debug_text
							text="player.age + ' checking if we can sell cargo to builder ships in ' + $checkrange.knownname"
							chance="$debugchance" />
						<find_buy_offer tradepartner="this.ship" space="$checkrange" result="$buyoffer"
							wares="$currentWare"
						>
							<totalvolume min="1" />
							<match_buyer>
								<match class="class.ship_xl" owner="faction.player" />
							</match_buyer>
						</find_buy_offer>
						<!--TODO: Filter the found trades. Pick the best one based on price
							or cargo space to be gained -->
						<do_if value="$buyoffer.exists">
							<debug_text
								text="player.age + ' buy offer on builder ship found: %1 in %2 needs %3 %4'.[$buyoffer.buyer.name, $buyoffer.buyer.zone.knownname, $buyoffer.offeramount.{this}, $buyoffer.ware.name]"
								chance="$debugchance" />
							<resume label="finish" />
						</do_if>

						<!--##################### step 2, check if cargo can sell to stations ##################### -->
						<set_value name="$sellvolume" exact="$currentWare.volume * this.ship.cargo.{$currentWare}.count" />

						<do_if value="@this.$trade_failedfindruns" min="3">
							<set_value name="$sellvolume" exact="0" />
						</do_if>
						<do_elseif value="this.ship.cargo.{$currentWare}.free" max="this.ship.cargo.{$currentWare}.max/2">
							<!-- if we have <= 50% free cargospace, also accept buyoffers for
								less
								to increase the chance of selling off cargo
								TODO: what we do with scaldis multi cargo transportable for exampl -->
							<set_value name="$sellvolume"
								exact="($currentWare.volume * this.ship.cargo.{$currentWare}.count)/(1 + @this.$trade_failedfindruns)" />
						</do_elseif>

						<debug_text text="player.age + ' checking if we can sell cargo in ' + $checkrange.knownname"
							chance="$debugchance" />
						<!-- Sell after 3 tries to lowes price Sellvolume is 0 -->
						<do_if value="@this.$trade_failedfindruns" max="3">
							<set_value name="$relPriceMax"
								exact="2f - 1f * (1-((this.$jlp_unitrader_courage + this.$jlp_unitrader_efficiency)/200))" />
							<set_value name="$relPriceMin"
								exact="0.0f + 0.9999999f * (1-((this.$jlp_unitrader_courage + this.$jlp_unitrader_efficiency)/200))" />
						</do_if>
						<do_else>
							<set_value name="$relPriceMax" exact="2f" />
							<set_value name="$relPriceMin" exact="0.0f" />
							<set_value name="$sellvolume" exact="1" />
						</do_else>
						<find_buy_offer tradepartner="this.ship" space="$checkrange" result="$buyoffers"
							wares="$currentWare" knowntoplayer="$onlyKnownSell" usereservations="true" multiple="true"
						>

							<!-- Sell cargo in the near without check
								<relativeprice max="$relPriceMax" min="$relPriceMin" /> -->

							<totalvolume min="$sellvolume" />
							<match_buyer>
								<match class="class.ship_xl" negate="true">
									<match_any>
										<match_relation faction="faction.player" comparison="exact" relation="friend" />
										<match_relation faction="faction.player" comparison="exact" relation="neutral" />
									</match_any>
								</match>
							</match_buyer>

						</find_buy_offer>
						<remove_value name="$sellvolume" />

						<!--Filter the found trades. Pick the best one based on price
							or cargo space to be gained -->

						<sort_trades name="$buyoffers" tradelist="$buyoffers" sorter="distance" refobject="this.ship" />
						<set_value name="$offerAdd" exact="true" />
						<do_all exact="$buyoffers.count" counter="$Counter2">
							<debug_text chance="$debugchance2"
								text="player.age + 'Found sell for cargo %1 byuoffers %2 '.[$currentWare, $buyoffers.count]" />
							<set_value name="$destination" exact="$buyoffers.{$Counter2}.buyer" />
							<do_if value="$destination.isclass.ship_xl" negate="true">
								<do_if
									value="(not $destination.tradenpc.container.hastradesubscription) and $onlyTraderSell
								"
								>
									<continue />
								</do_if>
							</do_if>

							<do_if value="$capship">
								<get_global_path component="$pathcomponents" multiple="1" usehighways="false">
									<start object="this.ship" />
									<end object="$destination" />
								</get_global_path>
							</do_if>
							<do_else>
								<get_global_path component="$pathcomponents" multiple="1" usehighways="true">
									<start object="this.ship" />
									<end object="$destination" />
								</get_global_path>
							</do_else>
							<do_all exact="$pathcomponents.count" counter="$Counter3">
								<!--TODO check what is haspriority -->
								<do_if
									value="$pathcomponents.{$Counter3}.isclass.zone and @$pathcomponents.{$Counter3}.haspriority"
								>
									<set_value name="$targetzoneOwner" exact="$pathcomponents.{$Counter3}.owner" />
								</do_if>
								<do_elseif value="$pathcomponents.{$Counter3}.isclass.object">
									<set_value name="$targetzoneOwner" exact="$pathcomponents.{$Counter3}.zone.owner" />
								</do_elseif>
								<get_factions_by_relation result="$EnemyFactions" faction="faction.player"
									relation="enemy" />
								<do_if value="$EnemyFactions.indexof.{$targetzoneOwner}">
									<debug_text chance="$debugchance2" text="player.age + 'On the route is a enemy Zone occure'" />
									<set_value name="$offerAdd" exact="false" />
									<break />
								</do_if>
							</do_all>
							<do_if value="$offerAdd" exact="true">
								<!-- Take the first best offer -->
								<set_value name="$buyoffer" exact="$buyoffers.{$Counter2}" />
								<debug_text chance="$debugchance"
									text="player.age + ' add buyoffer in Station %1 (%3) for ware %2'.[$buyoffer.buyer.knownname, $currentWare, $buyoffer.offeramount.{this}]" />
								<break />
							</do_if>
						</do_all>

						<do_if value="$buyoffer.available">
							<debug_text text="player.age + ' buy offer found!'" chance="$debugchance" />
							<resume label="finish" />
						</do_if>
					</do_all>
				</do_if>
				<!--No trade offer. If a $sellrange is defined, check to see if there
					is another area to search -->
				<do_elseif value="@$sellrange">
					<set_value name="$checkrange" exact="null" />
					<resume label="check sell range" />
				</do_elseif>
			</do_if>

			<!--If there is a $buyrange, find all clusters within the buy range -->
			<do_if value="@$buyrange">
				<debug_text text="'buyrange is min: ' + $buyrange.{1} + ' max: ' + $buyrange.{2}"
					chance="$debugchance2" />

				<set_value name="$buyclusters" exact="[]" />
				<set_value name="$buyclustersdistances" exact="[]" />

				<set_value name="$findclusters" exact="false" />
				<do_if value="@this.$traderange_nexttime le player.age">
					<set_value name="$findclusters" exact="true" />
				</do_if>

				<!--Get all clusters in range. Store on the blackboard so we don't have
					to recalculate every time. -->
				<!--However, recalculate every now and again incase a new gate has opened -->
				<do_if value="not this.$traderange_buyclusters? or $findclusters">
					<debug_text text="'using find_cluster to populate the blackboards list of clusters to buy to'"
						chance="$debugchance2" />
					<write_to_logbook text="'using find_cluster to populate the blackboards list of clusters to buy to'"
						chance="$debugchance2" category="squad" />
					<find_cluster name="this.$traderange_buyclusters" multiple="true" presentation="false">
						<match_gate_distance object="$range">
							<min exact="$buyrange.{1}" />
							<max exact="$buyrange.{2}" />
						</match_gate_distance>
					</find_cluster>
				</do_if>
				<set_value name="$buyclusters" exact="this.$traderange_buyclusters.clone"
					comment="Copy the list from the blackboard. We will work with this." />
				<write_to_logbook
					text="'buycluster known:' + $onlyKnownBuy + ' ' + $onlyKnownSell +  ' found: ' + $buyclusters.count "
					chance="$debugchance2" category="squad" />
				<!--Go over them again to sort them. But check the distance from the
					ships current cluster so that nearer clusters are prefered -->
				<do_all exact="$buyclusters.count" counter="$Counter">
					<append_to_list name="$buyclustersdistances" exact="$buyclusters.{$Counter}.gatedistance.{$range}" />
					<write_to_logbook
						text="'buycluster found: ' + $buyclusters.{$Counter}.name + ' at distance of ' + $buyclustersdistances.{$Counter}"
						chance="$debugchance2" category="squad" />
				</do_all>

				<debug_text text="'check if $checkrange is in buy range ' + $checkrange" chance="$debugchance2"
					comment="temp" />
				<do_if value="not $checkrange">
					<set_value name="$checkrange" exact="this.ship.zone" />

					<!--Check if the current $checkrange (the ships current zone) is within
						the buy range. If so, look for offers, otherwise it will check again
						from $range -->
					<debug_text text="'$range is ' + $range.knownname + ' checkrange is' + $checkrange.knownname"
						chance="$debugchance2" comment="temp" />
					<set_value name="$GateDistance" exact="$checkrange.gatedistance.{$range}" />
					<debug_text text="'buy range $GateDistance ' + $GateDistance" chance="$debugchance2"
						comment="temp" />
					<set_value name="$ValidDistance" exact="true" />
					<do_if value="$buyrange.{1} ge 0">
						<do_if value="$GateDistance lt $buyrange.{1}">
							<debug_text text="'outside min buy range'" chance="$debugchance2" />
							<set_value name="$ValidDistance" exact="false" />
						</do_if>
					</do_if>
					<do_if value="$buyrange.{2} ge 0">
						<do_if value="$GateDistance gt $buyrange.{2}">
							<debug_text text="'outside max buy range'" chance="$debugchance2" />
							<set_value name="$ValidDistance" exact="false" />
						</do_if>
					</do_if>
					<do_if value="not $ValidDistance">
						<debug_text
							text="player.age + ' The zone ' + $checkrange.knownname + ' is not within the ships range to buy things. Finding new buy area.'"
							chance="$debugchance" />
						<write_to_logbook
							text="this.ship.name + ' The zone ' + $checkrange.knownname + ' is not within the ships range to buy things. Finding new buy area.'"
							category="squad" chance="$debugchance2" />
						<set_value name="$checkrange" exact="null" />
					</do_if>
				</do_if>
			</do_if>

			<!--##################### step 3, check if we can buy from stations with which wares ##################### -->
			<label name="check buy range" />

			<do_if value="@$buyrange">
				<do_if value="not $checkrange">
					<do_if value="$buyclusters.count">
						<set_value name="$Index" exact="$buyclustersdistances.indexof.{$buyclustersdistances.min}" />
						<set_value name="$checkrange" exact="$buyclusters.{$Index}" />
						<debug_text text="player.age + 'range to buy wares is now ' + $checkrange.knownname"
							chance="$debugchance" />
						<write_to_logbook text="this.ship.name + 'range to buy wares is now ' + $checkrange.knownname"
							category="squad" chance="$debugchance2" />
						<remove_value name="$buyclusters.{$Index}" />
						<remove_value name="$buyclustersdistances.{$Index}" />
					</do_if>
					<do_else>
						<resume label="finish" />
					</do_else>
				</do_if>
			</do_if>

			<label name="find sell offers" />

			<wait exact="this.$jlp_unitrader_searchtime" />

			<do_if value="this.ship.cargo.free ge $minvolume">
				<!-- experimental: find builder ships in need and prefer buying what
					they need -->
				<do_if value="@$buildership_check">
					<find_buy_offer tradepartner="this.ship" space="$checkrange" result="$buildoffers"
						multiple="true"
					>
						<totalvolume min="1" />
						<match_buyer>
							<match class="class.ship_xl" owner="faction.player" />
						</match_buyer>
					</find_buy_offer>
					<do_if value="$buildoffers.count gt 0">

						<create_list name="$buildwarelist" />
						<do_all exact="$buildoffers.count" counter="$b">
							<do_if value="this.ship.cargo.{$buildoffers.{$b}.ware}.free ge $buildoffers.{$b}.minamount">
								<append_to_list name="$buildwarelist" exact="$buildoffers.{$b}.ware" />
							</do_if>
						</do_all>
						<do_if value="$buildwarelist.count gt 0">
							<set_value name="$warelist_backup" exact="$warelist" />
							<set_value name="$warelist" exact="$buildwarelist" />
							<set_value name="$selltobuildership" exact="true" />
							<remove_value name="$buildwarelist" />
							<debug_text text="'builder ship resource preference selects ware(s) to buy: ' + $warelist"
								chance="$debugchance" />
						</do_if>
					</do_if>
				</do_if>

				<!--Prefilter wares there are no space for -->
				<create_list name="$filteredwarelist" />
				<do_all exact="$warelist.count" counter="$Counter">
					<do_if value="this.ship.cargo.{$warelist.{$Counter}}.free" min="this.ship.cargo.{$warelist.{$Counter}}.max / 20">
						<append_to_list name="$filteredwarelist" exact="$warelist.{$Counter}" />
						<debug_text text="'has space for ' + $warelist.{$Counter}.name + '. can buy more'"
							chance="$debugchance" />
					</do_if>
					<do_else>
						<debug_text text="'has too much ' + $warelist.{$Counter}.name + '. do not look to buy more'"
							chance="$debugchance" />
					</do_else>
				</do_all>
				<!-- now check for good sell offers (if we still have space to buy stuff) -->
				<debug_text text="player.age + ' checking if we can buy cargo in ' + $checkrange.knownname"
					chance="$debugchance" />
				<write_to_logbook text="this.ship.name + ' checking if we can buy cargo in ' + $checkrange.knownname"
					category="squad" chance="$debugchance2" />
				<set_value name="$selloffers" exact="[]" />


				<!--If no $warelist was provided then just search with $filteredwarelist
					as an empty list to find all possible wares -->
				<do_if value="not $warelist.count or $filteredwarelist.count">
					<do_if value="$selltobuildership?">
						<find_sell_offer tradepartner="this.ship" space="$checkrange" result="$selloffers"
							wares="$filteredwarelist" multiple="true"
						>
							<totalvolume min="1" />
							<match_seller class="class.ship_xl" owner="faction.player" />
						</find_sell_offer>
						<debug_text text="player.age + ' found %1 selloffers for buildership check'.[$selloffers.count]"
							chance="$debugchance" />
					</do_if>
					<do_else>
						<!-- Skill volume -->
						<set_value name="$minVolumeRange"
							exact="$minvolume*(1.0f-((this.$jlp_unitrader_efficiency + this.$jlp_unitrader_courage)/200f)f)" />
						<set_value name="$searchMinVolume" exact="$minvolume - $minVolumeRange" />
						<set_value name="$relPriceMax"
							exact="2.0f - 1.0f * (1.0f-((this.$jlp_unitrader_courage + this.$jlp_unitrader_efficiency)/200f)f)" />
						<set_value name="$relPriceMin"
							exact="0.0f + 0.99999999f * (1.0f-((this.$jlp_unitrader_courage + this.$jlp_unitrader_efficiency)/200f)f)" />
						<set_value name="$relPriceMax"
							exact="$relPriceMax * (@this.$trade_failedfindruns+1f)f" />
						<set_value name="$relPriceMin"
							exact="$relPriceMin / (@this.$trade_failedfindruns+1f)f" />
						<debug_text
							text="player.age + '%1:%2Look for Buy: relPrice: %3\nVolume: %4\nwith my skills:'.[this.ship.knownname, this.knownname, $relPrice, $searchMinVolume ]"
							chance="$debugchance" />
						<write_to_logbook
							text="'%1:%2Look for Buy: relPrice: Max %3 Min %4\nVolume: %5\nwith my skills:'.[this.ship.knownname, this.knownname, $relPriceMax, $relPriceMin, $searchMinVolume ]"
							category="squad" chance="$debugchance2" />

						<find_sell_offer tradepartner="this.ship" space="$checkrange" result="$selloffers"
							wares="$filteredwarelist" multiple="true" knowntoplayer="$onlyKnownBuy" usereservations="true"
						>

							<relativeprice max="$relPriceMax" min="$relPriceMin" />
							<totalvolume min="$searchMinVolume" />
							<match_seller>
								<match class="class.ship_xl" negate="true" />
								<match_any>
									<match_relation faction="faction.player" comparison="exact" relation="friend" />
									<match_relation faction="faction.player" comparison="exact" relation="neutral" />
								</match_any>
							</match_seller>
							<!--<relativeprice max="0.999999f" comment="this effectively means
								the price must be below the average price to be considered" /> -->
						</find_sell_offer>
						<write_to_logbook
							text="this.ship.name + ' found %1 selloffers in Range %2 for regular check try %3'.[$selloffers.count, $checkrange.knownname  ,@this.$trade_failedfindruns]"
							category="squad" chance="$debugchance2" />
						<debug_text
							text="player.age + ' found %1 selloffers in Range %2 for regular check try %3'.[$selloffers.count, $checkrange.knownname  ,@this.$trade_failedfindruns]"
							chance="$debugchance" />
					</do_else>
				</do_if>

				<do_if value="$selloffers.count">
					<!--List all wares of the found trades so we can search for buy offers
						in our sell range. This prevents the ship buying wares it can't sell -->
					<sort_trades name="$selloffers" tradelist="$selloffers" sorter="totalvolume" />
					<sort_trades name="$selloffers" tradelist="$selloffers" sorter="relativeprice" />
					<set_value name="$soldwares" exact="[]" />
					<set_value name="$tradablewares" exact="[]" />
					<set_value name="$bestbuyoffers" exact="[]" />
					<do_all exact="$selloffers.count" counter="$Counter">
						<do_if value="this.ship.cargo.{$selloffers.{$Counter}.ware}.max" min="1" negate="true">
							<continue />
						</do_if>
						<do_if
							value="not $soldwares.indexof.{$selloffers.{$Counter}.ware} and (this.ship.cargo.{$selloffers.{$Counter}.ware}.free gt this.ship.cargo.{$selloffers.{$Counter}.ware}.max/10)"
						>
							<set_value name="$destination" exact="$selloffers.{$Counter}.seller" />
							<do_if value="$destination.isclass.ship_xl" negate="true">
								<do_if value="(not $destination.tradenpc.container.hastradesubscription) and $onlyTraderBuy">
									<continue />
								</do_if>
							</do_if>

							<do_if value="$capship">
								<get_global_path component="$pathcomponents" multiple="1" usehighways="false">
									<start object="this.ship" />
									<end object="$destination" />
								</get_global_path>
							</do_if>
							<do_else>
								<get_global_path component="$pathcomponents" multiple="1" usehighways="true">
									<start object="this.ship" />
									<end object="$selloffers.{$Counter}.seller" />
								</get_global_path>
							</do_else>
							<set_value name="$offerAdd" exact="true" />
							<do_all exact="$pathcomponents.count" counter="$Counter2">
								<do_if
									value="$pathcomponents.{$Counter2}.isclass.zone and @$pathcomponents.{$Counter2}.haspriority"
								>
									<set_value name="$targetzoneOwner" exact="$pathcomponents.{$Counter2}.owner" />
								</do_if>
								<do_elseif value="$pathcomponents.{$Counter2}.isclass.object">
									<set_value name="$targetzoneOwner" exact="$pathcomponents.{$Counter2}.zone.owner" />
								</do_elseif>
								<get_factions_by_relation result="$EnemyFactions" faction="faction.player"
									relation="enemy" />
								<do_if value="$EnemyFactions.indexof.{$targetzoneOwner}">
									<set_value name="$offerAdd" exact="false" />
									<break />
								</do_if>
							</do_all>

							<do_if value="$offerAdd" exact="true">
								<do_if
									value="$selloffers.{$Counter}.ware.illegalto.{$selloffers.{$Counter}.seller.owner}.{this.ship.owner}"
								>

									<append_to_list name="$soldwares" exact="$selloffers.{$Counter}.ware"
										chance="this.$jlp_unitrader_courage" />
								</do_if>
								<do_else>
									<append_to_list name="$soldwares" exact="$selloffers.{$Counter}.ware" />
								</do_else>
							</do_if>
						</do_if>
					</do_all>

					<!--##################### step 4, check if we can sell to stations with choosen wares from sell offer##################### -->


					<set_value name="$minVolumeRange"
						exact="$minvolume*(((this.$jlp_unitrader_efficiency + this.$jlp_unitrader_courage)/200f)f)" />
					<set_value name="$searchMinVolume" exact="$minvolume - $minVolumeRange" />
					<set_value name="$relPriceMax"
						exact="2f - 1f * (1.0f-((this.$jlp_unitrader_courage + this.$jlp_unitrader_efficiency)/200f)f)" />
					<set_value name="$relPriceMin"
						exact="0.0f + 0.9999999f * (1.0f-((this.$jlp_unitrader_courage + this.$jlp_unitrader_efficiency)/200f)f)" />
					<set_value name="$relPriceMax"
						exact="$relPriceMax * (@this.$trade_failedfindruns+1f)f" />
					<set_value name="$relPriceMin"
						exact="$relPriceMin / (@this.$trade_failedfindruns+1f)f" />

					<debug_text
						text="player.age + '%1:%2Look for Sell: relPrice %3\nVolume %4\nwith my skills:'.[this.ship.knownname, this.knownname, $relPrice, $searchMinVolume ]"
						chance="$debugchance" />
					<write_to_logbook
						text="'%1:%2Look for Sell: relPrice Max %3 Min %4 \nVolume %5\nwith my skills:'.[this.ship.knownname, this.knownname, $relPriceMax, $relPriceMin, $searchMinVolume ]"
						category="squad" chance="$debugchance2" />

					<!--Check for buy offers of clusters within the $sellrange -->
					<do_if value="@$sellrange">
						<set_value name="$sellclusters" exact="this.$traderange_sellclusters.clone"
							comment="Copy the list from the blackboard. We will work with this." />

						<do_all exact="$sellclusters.count" counter="$Counter">
							<write_to_logbook
							text="this.ship.name + 'soldwares: %1, range: %2, class: %3, minvolume: %4, tradeablewares: %5'.[$soldwares, $checkrange.knownname, $checkrange.class, $minvolume, $tradablewares]"
							category="squad" chance="$debugchance2"/>
							<find_buy_offer tradepartner="this.ship" wares="$soldwares" space="$sellclusters.{$Counter}"
								result="$buyoffers" multiple="true" knowntoplayer="$onlyKnownSell" usereservations="true"
							>
								
								<totalvolume min="$searchMinVolume" />
								<relativeprice max="$relPriceMax" min="$relPriceMin" />
								<match_buyer>
									<match class="class.ship_xl" negate="true">
										<match_any>
											<match_relation faction="faction.player" comparison="exact" relation="friend" />
											<match_relation faction="faction.player" comparison="exact" relation="neutral" />
										</match_any>
									</match>
								</match_buyer>
							</find_buy_offer>
							<!-- I hope the sort algorythm doesnt change the position, like bubblesort -->
							<sort_trades name="$buyoffers" tradelist="$buyoffers" sorter="totalvolume" />
							<sort_trades name="$buyoffers" tradelist="$buyoffers" sorter="relativeprice" />
							<do_all exact="$buyoffers.count" counter="$Counter2" reverse="true">
								<do_if value="not $tradablewares.indexof.{$buyoffers.{$Counter2}.ware}">
									<set_value name="$destination" exact="$buyoffers.{$Counter2}.buyer" />
									<do_if value="$destination.isclass.ship_xl" negate="true">
										<do_if value="(not $destination.tradenpc.container.hastradesubscription) and $onlyTraderSell">
											<continue />
										</do_if>
									</do_if>

									<do_if value="$capship">
										<get_global_path component="$pathcomponents" multiple="1" usehighways="false">
											<start object="this.ship" />
											<end object="$destination" />
										</get_global_path>
									</do_if>
									<do_else>
										<get_global_path component="$pathcomponents" multiple="1" usehighways="true">
											<start object="this.ship" />
											<end object="$buyoffers.{$Counter2}.buyer" />
										</get_global_path>
									</do_else>
									<set_value name="$offerAdd" exact="true" />
									<do_all exact="$pathcomponents.count" counter="$Counter3">
										<do_if
											value="$pathcomponents.{$Counter3}.isclass.zone and @$pathcomponents.{$Counter3}.haspriority"
										>
											<set_value name="$targetzoneOwner" exact="$pathcomponents.{$Counter3}.owner" />
										</do_if>
										<do_elseif value="$pathcomponents.{$Counter3}.isclass.object">
											<set_value name="$targetzoneOwner" exact="$pathcomponents.{$Counter3}.zone.owner" />
										</do_elseif>
										<get_factions_by_relation result="$EnemyFactions" faction="faction.player"
											relation="enemy" />
										<do_if value="$EnemyFactions.indexof.{$targetzoneOwner}">
											<set_value name="$offerAdd" exact="false" />
											<break />
										</do_if>
									</do_all>

									<do_if value="$offerAdd" exact="true">
										<debug_text text="'adding to list of tradeablewares'" chance="$debugchance2" />
										<append_to_list name="$tradablewares" exact="$buyoffers.{$Counter2}.ware" />
										<append_to_list name="$bestbuyoffers" exact="$buyoffers.{$Counter2}" />
										<do_if value="$soldwares.count == $tradablewares.count">
											<break />
										</do_if>
									</do_if>
								</do_if>
							</do_all>

							<do_if value="$soldwares.count == $tradablewares.count">
								<break />
							</do_if>
						</do_all>
					</do_if>
					<!--Check for buy offers within $range -->
					<do_else>
						<debug_text
							text="'soldwares: %1, range: %2, class: %3, minvolume: %4, tradeablewares: %5'.[$soldwares, $range.knownname, $range.class, $minvolume, $tradablewares]"
							chance="$debugchance2" />
						<write_to_logbook
							text="this.ship.name + ' soldwares: %1, range: %2, class: %3, minvolume: %4, tradeablewares: %5'.[$soldwares, $checkrange.knownname, $checkrange.class, $minvolume, $tradablewares]"
							category="squad" chance="$debugchance2" />
						<find_buy_offer tradepartner="this.ship" wares="$soldwares" space="$range"
							result="$buyoffers" multiple="true" knowntoplayer="$onlyKnownSell" usereservations="true"
						>
							<totalvolume min="$searchMinVolume" />
							<relativeprice max="$relPriceMax" min="$relPriceMin" />
							<match_buyer>
								<match class="class.ship_xl" negate="true">
									<match_any>
										<match_relation faction="faction.player" comparison="exact" relation="friend" />
										<match_relation faction="faction.player" comparison="exact" relation="neutral" />
									</match_any>
								</match>
							</match_buyer>
						</find_buy_offer>
						<!-- I hope the sort algorythm doesnt change the position, like bubblesort -->
						<sort_trades name="$buyoffers" tradelist="$buyoffers" sorter="totalvolume" />
						<sort_trades name="$buyoffers" tradelist="$buyoffers" sorter="relativeprice" />
						<do_all exact="$buyoffers.count" counter="$Counter" reverse="true">
							<debug_text
								text="'%1(%2) is buying %3 %4'.[$buyoffers.{$Counter}.buyer.knownname, $buyoffers.{$Counter}.buyer, $buyoffers.{$Counter}.offeramount.{this}, $buyoffers.{$Counter}.ware]"
								chance="$debugchance2" />
							<set_value name="$destination" exact="$buyoffers.{$Counter}.buyer" />
							<do_if value="$destination.isclass.ship_xl" negate="true">
								<do_if value="(not $destination.tradenpc.container.hastradesubscription) and $onlyTraderSell">
									<continue />
								</do_if>
							</do_if>

							<do_if value="not $tradablewares.indexof.{$buyoffers.{$Counter}.ware}">
								<debug_text text="'adding to list of tradeablewares'" chance="$debugchance2" />
								<append_to_list name="$tradablewares" exact="$buyoffers.{$Counter}.ware" />
								<append_to_list name="$bestbuyoffers" exact="$buyoffers.{$Counter}" />
								<do_if value="$soldwares.count == $tradablewares.count">
									<break />
								</do_if>
							</do_if>
						</do_all>
					</do_else>
					<do_all exact="$bestbuyoffers.count" counter="$Counter">
						<debug_text
							text="$bestbuyoffers.{$Counter} + ' adjustment:' + $bestbuyoffers.{$Counter}.relativeprice
						+ ' - ' + $bestbuyoffers.{$Counter}.ware + ' ' + $bestbuyoffers.{$Counter}.offeramount.{this}
						+ ' ' + $bestbuyoffers.{$Counter}.buyer.macro + ' ' + $bestbuyoffers.{$Counter}.buyer.zone.macro" />
						<write_to_logbook
							text="this.ship.name + ': '  + $bestbuyoffers.{$Counter} + ' adjustment:' + $bestbuyoffers.{$Counter}.relativeprice
						+ ' - ' + $bestbuyoffers.{$Counter}.ware + ' ' + $bestbuyoffers.{$Counter}.offeramount.{this}
						+ ' ' + $bestbuyoffers.{$Counter}.buyer.macro + ' ' + $bestbuyoffers.{$Counter}.buyer.zone.macro"
							category="squad" chance="$debugchance2" />
					</do_all>
					<debug_text
						text="player.age + 'Try ' + this.$trade_failedfindruns + ' wares which can be bought and sold in range are: ' + $tradablewares"
						chance="$debugchance2" />
					<write_to_logbook
						text="this.ship.name + 'Try ' + this.$trade_failedfindruns + ' wares which can be bought and sold in range (' + $selloffers.count + ') are: ' + $tradablewares"
						category="squad" chance="$debugchance2" />

					<do_all exact="$selloffers.count">
						<set_value name="$currentoffer" exact="null" />

						<do_if value="@$tradablewares.count" min="3">
							<!--Iterate a few times to see if there is a sell offer for one of
								the most needed wares -->
							<do_all exact="$tradablewares.count" counter="$Counter">
								<set_value name="$tradablewares_index" min="1" max="$tradablewares.count" profile="decreasing"
									scale="10" />
								<!--<debug_text text="'$tradablewares_index' + $tradablewares_index"/> -->
								<do_all exact="$selloffers.count">
									<set_value name="$randomselloffer" exact="$selloffers.random" />
									<!--<debug_text text="'$selloffers.{$Counter2}.ware' + $selloffers.{$Counter2}.ware"/>
										<debug_text text="'$tradablewares.{$tradablewares_index}' + $tradablewares.{$tradablewares_index}"/> -->
									<do_if value="not $randomselloffer.available">
										<continue />
									</do_if>
									<do_if value="$randomselloffer.ware" exact="$tradablewares.{$tradablewares_index}">
										<set_value name="$currentoffer" exact="$randomselloffer" />
										<remove_value name="$selloffers.{$selloffers.indexof.{$currentoffer}}" />
										<debug_text text="$tradablewares.{$tradablewares_index} + ' may be a well needed resource.'"
											chance="$debugchance2" />
										<break />
									</do_if>
									<remove_value name="$randomselloffer" />
								</do_all>
								<do_if value="$currentoffer">
									<break />
								</do_if>
								<do_elseif value="$Counter" min="$selloffers.count/2">
									<break />
								</do_elseif>
							</do_all>
						</do_if>

						<do_if value="not $currentoffer">
							<set_value name="$currentoffer" exact="$selloffers.random" />
							<remove_value name="$selloffers.{$selloffers.indexof.{$currentoffer}}" />
						</do_if>
						<do_if value="not $currentoffer.available">
							<continue />
						</do_if>
						<do_if value="$tradablewares?">
							<do_if value="not $tradablewares.indexof.{$currentoffer.ware}">
								<debug_text
									text="player.age + 'There is nowhere to currently sell ' + $currentoffer.ware.name + ' in our sell range. Skipping'"
									chance="$debugchance2" />
								<write_to_logbook
									text="this.ship.name + 'There is nowhere to currently sell ' + $currentoffer.ware.name + ' in our sell range. Skipping'"
									category="squad" chance="$debugchance2" />
								<continue />
							</do_if>
						</do_if>

						<do_if value="$currentoffer.available">
							<!-- do not reserve certain wares (otherwise they can't be dispatched
								fast enough) -->
							<set_value name="$reservableware" exact="true" />
							<do_if
								value="$currentoffer.ware == ware.bofu or $currentoffer.ware == ware.energycells or $currentoffer.ware == ware.foodrations or $currentoffer.ware == ware.water"
							>
								<debug_text text="$currentoffer.ware + ' must not be reserved'" chance="$debugchance" />
								<set_value name="$reservableware" exact="false" />
							</do_if>
							<!-- check the trade owner's blackboard for whether someone already
								expressed interest in this trade offer -->
							<do_if value="$reservetrades and $reservableware">
								<debug_text text="'checking if trade ' + $currentoffer + ' is reserved'" chance="$debugchance" />
								<set_value name="$reserved" exact="false" />
								<do_if value="$currentoffer.seller.tradenpc.$reservedtrades?">
									<debug_text
										text="$currentoffer.seller.tradenpc.$reservedtrades.count + ' trades reserved already'"
										chance="$debugchance" />
									<do_all exact="$currentoffer.seller.tradenpc.$reservedtrades.count" counter="$j"
										reverse="true"
									>
										<do_if value="not $currentoffer.seller.tradenpc.$reservedtrades.{$j}.exists">
											<!-- garbage collect expired reserved trades -->
											<debug_text text="'purging expired reserved trade at index ' + $j" chance="$debugchance" />
											<remove_value name="$currentoffer.seller.tradenpc.$reservedtrades.{$j}" />
											<continue />
										</do_if>
										<debug_text
											text="'checking against trade ' + $currentoffer.seller.tradenpc.$reservedtrades.{$j}"
											chance="$debugchance" />
										<do_if value="$currentoffer.seller.tradenpc.$reservedtrades.{$j} == $currentoffer">
											<set_value name="$reserved" exact="true" />
											<debug_text text="'trade ' + $currentoffer + ' is reserved'" chance="$debugchance" />
										</do_if>
									</do_all>
								</do_if>
								<do_if value="not $reserved">
									<debug_text text="'reserving trade ' + $currentoffer" chance="$debugchance" />
									<do_if value="$currentoffer.seller.tradenpc.$reservedtrades?">
										<append_to_list name="$currentoffer.seller.tradenpc.$reservedtrades" exact="$currentoffer" />
									</do_if>
									<do_else>
										<set_value name="$currentoffer.seller.tradenpc.$reservedtrades" exact="[$currentoffer]" />
									</do_else>
									<set_value name="$selloffer" exact="$currentoffer" />
									<break />
								</do_if>
							</do_if>
							<do_else>
								<set_value name="$selloffer" exact="$currentoffer" />
								<break />
							</do_else>
						</do_if>
						<wait min="500ms" max="3s" sinceversion="1" />
						<!-- if we saved in this part, clean up i and the previously tried
							entries -->
						<do_if value="$i?">
							<do_all exact="$i" counter="$j" reverse="true">
								<remove_value name="$selloffers.{$j}" />
							</do_all>
							<remove_value name="$i" />
						</do_if>
					</do_all>
				</do_if>

				<do_if value="$selloffer.exists">
					<do_if value="$bestbuyoffers?">
						<do_all exact="$bestbuyoffers.count" counter="$Counter">
							<set_value name="$checkoffer" exact="$bestbuyoffers.{$Counter}" />
							<do_if value="$checkoffer.available">
								<do_if value="$checkoffer.ware" exact="$selloffer.ware">
									<do_if value="not $selltobuildership?">
										<!-- check if there is profit in this trip at all -->
										<set_value name="$checkamount" exact="$selloffer.offeramount" />
										<do_if value="$checkamount gt this.ship.cargo.{$selloffer.ware}.free">
											<set_value name="$checkamount" exact="this.ship.cargo.{$selloffer.ware}.free" />
										</do_if>
										<do_if value="$checkamount gt $checkoffer.offeramount.{this}">
											<set_value name="$checkamount" exact="$checkoffer.offeramount.{this}" />
										</do_if>
										<get_jump_cost ship="this.ship" start="this.sector" end="$selloffer.seller.sector"
											result="$trip1" />
										<get_jump_cost ship="this.ship" start="$selloffer.seller.sector" end="$checkoffer.buyer.sector"
											result="$trip2" />
										<set_value name="$fuelcost" exact="($trip1 + $trip2) * ware.fuelcells.averageprice" />
										<set_value name="$profit" exact="($checkoffer.unitprice - $selloffer.unitprice) * $checkamount" />
										<debug_text
											text="'trip to buy %1 %2 at %3(%4) and sell to %5(%6) has potential profit of %7 Cr and costs %8 Cr. real profit: %9 Cr.'.[$checkamount, $checkoffer.ware, $selloffer.seller.knownname, $selloffer.seller, $checkoffer.buyer.knownname, $checkoffer.buyer, $profit/1Cr, $fuelcost/1Cr, ($profit - $fuelcost)/1Cr]"
											chance="$debugchance" />
										<do_if value="$fuelcost ge ($profit - ($selloffer.unitprice * $checkamount * 0.02f))">
											<!-- if we don't make at least 2% of the ware price after expenses,
												this isn't worth our time -->
											<debug_text
												text="player.age + 'skip buy offer, reason: %1, %2, %3, %4 => %5'.[$fuelcost, $profit, $selloffer.unitprice, $checkamount, ($profit - ($selloffer.unitprice * $checkamount * 0.02f))]"
												chance="$debugchance" />
											<write_to_logbook
												text="this.ship.name + ' skip buy offer, reason: %1, %2, %3, %4 => %5'.[$fuelcost, $profit, $selloffer.unitprice, $checkamount, ($profit - ($selloffer.unitprice * $checkamount * 0.02f))]"
												category="squad" chance="$debugchance2" />
											<continue />
										</do_if>
									</do_if>
									<set_value name="$buyoffer" exact="$checkoffer" />
									<break />
								</do_if>
							</do_if>
						</do_all>
					</do_if>
					<remove_value name="$checkoffer" />

					<debug_text text="player.age + ' sell offer found!'" chance="$debugchance" />
					<resume label="finish" />
				</do_if>
			</do_if>

			<do_if value="@$sellrange">
				<set_value name="$checkrange" exact="null" />
				<write_to_logbook text="this.ship.name + ' no trade found!. Check next Cluster'"
					category="squad" chance="$debugchance2" />
				<resume label="check buy range" />
			</do_if>

			<do_if value="$checkrange == this.ship.zone and $checkrange != $range">
				<write_to_logbook text="this.ship.name + ' no trade found!. Check next in Range'"
					category="squad" chance="$debugchance2" />
				<!-- check again, but this time in the full range -->
				<set_value name="$checkrange" exact="$range" />
				<set_value name="$idletime" exact="this.$jlp_unitrader_searchtime" />
				<run_script name="'move.idle'" sinceversion="1">
					<param name="TimeOut" value="$idletime" />
				</run_script>
				<resume label="find trade run" />
			</do_if>

			<do_if value="$selltobuildership? or @$buildership_check">
				<set_value name="$buildership_check" exact="false" />
				<do_if value="@$warelist_backup">
					<set_value name="$warelist" exact="$warelist_backup" />
				</do_if>
				<remove_value name="$selltobuildership" />
				<resume label="find sell offers" />
			</do_if>

			<debug_text
				text="player.age + ' no good trade offer found. \'%1\'(job: \'%5\'), looking for offers in \'%2\', warelist: \'%3\', cargo: \'%4\''.[this.ship.knownname, $checkrange.knownname, $warelist, this.ship.cargo.list, this.ship.job]"
				chance="$debugchance2" />


			<label name="finish" />
			<do_if value="$buyoffer.exists and $selloffer.exists">
				<debug_text
					text="player.age + ' Traderun found for [' + this.ship + '] ' + this.ship.knownname + ' in ' + this.ship.sector.knownname"
					chance="$debugchance" />
				<debug_text
					text="player.age + ' SELLOFFER INFO:\'%1\' sells %2 units of %3 for %4 Cr each; total price of %5 Cr.'.[$selloffer.seller.knownname, $selloffer.offeramount.{this}, $selloffer.ware.name, $selloffer.unitprice / 100, $selloffer.price / 100]"
					chance="$debugchance" />
				<debug_text
					text="player.age + ' BUYOFFER INFO:\'%1\' wants %2 units of %3 for %4 Cr each; total price of %5 Cr.'.[$buyoffer.buyer.knownname, $buyoffer.offeramount.{this}, $buyoffer.ware.name, $buyoffer.unitprice / 100, $buyoffer.price / 100]"
					chance="$debugchance" />
			</do_if>
			<do_else>
				<do_if value="$buyoffer.exists">
					<debug_text
						text="player.age + ' BUYOFFER INFO:\'%1\' wants %2 units of %3 for %4 Cr each; total price of %5 Cr.'.[$buyoffer.buyer.knownname, $buyoffer.offeramount.{this}, $buyoffer.ware.name, $buyoffer.unitprice / 100, $buyoffer.price / 100]"
						chance="$debugchance" />
				</do_if>
				<do_if value="$selloffer.exists">
					<debug_text
						text="player.age + ' SELLOFFER INFO:\'%1\' sells %2 units of %3 for %4 Cr each; total price of %5 Cr.'.[$selloffer.seller.knownname, $selloffer.offeramount.{this}, $selloffer.ware.name, $selloffer.unitprice / 100, $selloffer.price / 100]"
						chance="$debugchance" />
				</do_if>
			</do_else>

			 <do_if value="@$findclusters">

				<set_value name="this.$traderange_nexttime" exact="player.age + 30min" />
				<debug_text
				text="player.age + ' - setting this.$traderange_nexttime to ' + this.$traderange_nexttime"
				chance="$debugchance2" />
			</do_if>

		<!--		TODO: if we find that traders buy too much of a ware, only fill a
				fraction of the cargo space with any one ware, so that we'll still have
				space
				for others left (only if the basket contains more than one ware) -->
			<!--<set_value name="$totalcargospace" exact="this.ship.cargo.{$ware}.max"
				/>
				<set_value name="$freecargospace" exact="this.ship.cargo.{$ware}.free"
				/>
				<set_value name="$amount" />
				<debug_text text="'Amount that will be traded: ' + $amount" chance="$debugchance"
				/>
				<retval name="amount" value="$amount" /> -->
			<return>
				<retval name="buyoffer" value="$buyoffer" />
				<retval name="selloffer" value="$selloffer" />
			</return>

		</actions>
	</attention>
</aiscript>
